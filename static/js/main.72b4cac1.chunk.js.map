{"version":3,"sources":["Board.js","GameResult.js","App.js","index.js"],"names":["Board","props","className","board","map","image","i","onClick","checkSelection","src","alt","GameResult","points","bestScore","restartGame","App","images","getRandomImages","amount","item","items","length","Math","floor","random","includes","push","useState","setBoard","selections","setSelections","setPoints","setBestScore","gameOver","setGameOver","reloadBoard","prevState","concat","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAmBeA,EAjBD,SAACC,GACX,OACI,mCACI,qBAAKC,UAAU,QAAf,SACKD,EAAME,MAAMC,KAAI,SAACC,EAAOC,GACrB,OACI,sBAAiBC,QAAS,kBAAMN,EAAMO,eAAeH,IAAQH,UAAU,OAAvE,UACI,qBAAKO,IAAK,UAAUJ,EAAM,OAAQK,IAAKL,IACvC,+BAAOA,MAFDC,EAAI,WCavBK,EAnBI,SAACV,GAEhB,OACI,sBAAKC,UAAU,SAAf,UACKD,EAAMW,OAASX,EAAMY,UAClB,qCACI,kDACA,uEAEJ,qCACI,2CACA,4FAGR,wBAAQN,QAASN,EAAMa,YAAvB,6BCmEGC,EA/EH,WAER,IAEIC,EAAS,CACT,MAAM,OAAO,MACb,OAAO,MAAM,QACb,MAAM,cAAc,UACpB,MAAM,OAAO,YACb,OAAO,MAAM,UACb,SAAS,OAAO,WAGdC,EAAkB,SAACC,GAGrB,IAFA,IACIC,EADAC,EAAQ,GAENA,EAAMC,OAASH,GACjBC,EAAOH,EAAOM,KAAKC,MAAMD,KAAKE,SAASR,EAAOK,SAC1CD,EAAMK,SAASN,IAAOC,EAAMM,KAAKP,GAEzC,OAAOC,GApBG,EAuBYO,mBAASV,EArBnB,IAFF,mBAuBPd,EAvBO,KAuBAyB,EAvBA,OAwBsBD,mBAAS,IAxB/B,mBAwBPE,EAxBO,KAwBKC,EAxBL,OAyBcH,mBAAS,GAzBvB,mBAyBPf,EAzBO,KAyBCmB,EAzBD,OA0BoBJ,mBAAS,GA1B7B,mBA0BPd,EA1BO,KA0BImB,EA1BJ,OA2BkBL,oBAAS,GA3B3B,mBA2BPM,EA3BO,KA2BGC,EA3BH,KA6BRC,EAAc,WAChBP,EAASX,EA5BG,KAiDhB,OACI,qCACI,kDACA,sBAAKf,UAAU,YAAf,UACI,sBAAKA,UAAU,QAAf,UACI,sBAAKA,UAAU,SAAf,qBAAgC,4BAAIU,OACpC,sBAAKV,UAAU,aAAf,yBAAwC,4BAAIW,UAE9CoB,EAME,cAAC,EAAD,CACInB,YAvBA,WACbF,EAASC,GAAWmB,EAAapB,GACpCkB,EAAc,IACdC,EAAU,GACVI,IACAD,GAAY,IAmBItB,OAAQA,EACRC,UAAWA,IARf,cAAC,EAAD,CACIV,MAAOA,EACPK,eA7BG,SAACH,GACjBwB,EAAWJ,SAASpB,GACnB6B,GAAY,IAEZJ,GAAc,SAAAM,GAAS,OAAIA,EAAUC,OAAOhC,MAC5C0B,GAAU,SAAAK,GAAS,OAAIA,EAAY,KACnCD,WAiCA,sBAAKjC,UAAU,SAAf,wBACe,mBAAGoC,KAAK,gCAAR,mCCxE3BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.72b4cac1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Board = (props) => {\n    return (\n        <>\n            <div className=\"board\">\n                {props.board.map((image, i) => {\n                    return (\n                        <div key={i + 1} onClick={() => props.checkSelection(image)} className=\"card\">\n                            <img src={\"images/\"+image+\".png\"} alt={image} />\n                            <span>{image}</span>\n                        </div>\n                    );\n                })}\n            </div>\n        </>\n    );\n};\n\nexport default Board;","import React from 'react';\n\nconst GameResult = (props) => {\n\n    return (\n        <div className=\"result\">\n            {props.points > props.bestScore ?\n                <>\n                    <h2>Congratulations!</h2>\n                    <h3>You have achieved a new Best Score</h3>\n                </> :\n                <>\n                    <h2>Game Over</h2>\n                    <h3>You made it quite good, but try to beat the best score!</h3>\n                </>\n            }\n            <button onClick={props.restartGame}>Play again!</button>\n        </div>\n    );\n};\n\nexport default GameResult;","import React, { useState } from 'react';\nimport Board from './Board';\nimport GameResult from './GameResult';\n\nconst App = () => {\n\n    let boardSize = 6;\n\n    let images = [\n        'ant','bear','bee',\n        'bird','ant','camel',\n        'cat','caterpillar','chicken',\n        'cow','crab','crocodile',\n        'deer','dog','dolphin',\n        'donkey','fish','giraffe'\n    ];\n\n    const getRandomImages = (amount) => {\n        let items = [];\n        let item;\n        while(items.length < amount) {\n            item = images[Math.floor(Math.random()*images.length)];\n            if(!items.includes(item)) items.push(item);\n        }\n        return items;\n    };\n\n    const [board, setBoard] = useState(getRandomImages(boardSize));\n    const [selections, setSelections] = useState([]);\n    const [points, setPoints] = useState(0);\n    const [bestScore, setBestScore] = useState(0);\n    const [gameOver, setGameOver] = useState(false);\n\n    const reloadBoard = () => {\n        setBoard(getRandomImages(boardSize));\n    };\n\n    const checkSelection = (image) => {\n        if(selections.includes(image)) {\n            setGameOver(true);\n        } else {\n            setSelections(prevState => prevState.concat(image));\n            setPoints(prevState => prevState + 1);\n            reloadBoard();\n        }\n    };\n\n    const restartGame = () => {\n        if(points > bestScore) setBestScore(points);\n        setSelections([]);\n        setPoints(0);\n        reloadBoard();\n        setGameOver(false);\n    };\n\n    return (\n        <>\n            <h1>Memory Card Game</h1>\n            <div className=\"container\">\n                <div className=\"score\">\n                    <div className=\"points\">Points: <b>{points}</b></div>\n                    <div className=\"best-score\">Best score: <b>{bestScore}</b></div>\n                </div>\n                {!gameOver ? \n                    <Board \n                        board={board}\n                        checkSelection={checkSelection}\n                    />\n                    :\n                    <GameResult \n                        restartGame={restartGame} \n                        points={points}\n                        bestScore={bestScore}\n                    />\n                }\n            </div>\n            <div className=\"footer\">\n                Created by <a href=\"https://github.com/danisolo91\">Daniel Solomon</a>\n            </div>\n        </>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}